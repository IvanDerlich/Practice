
def hash_table(arr) 
  mod = 11
  hash = Hash.new{ |h,k| h[k] = [] }
  arr.each do |num|     
    key = num.abs % mod
    hash[key] << num    
  end 
  result = []
  for i in 0...mod do
    hash[i].each do |value|
      result.push(value)      
    end
  end  
  result
end

def model_solution(array)
  fake_hash = []
  
  array.each do |element|
    key = element.abs % 11
    if fake_hash[key]
      fake_hash[key] << element
    else
      fake_hash[key] = [element]
    end
  end
  
  fake_hash.compact.flatten
end


def go(input,expected)
  p expected
  p hash_table(input)
  p "----" 
end

go( [12, 24, 125, 5, 91, 1106, 2, 1021, 29, 3536, 10],
    [12, 24, 2, 91, 125, 5, 3536, 1106, 29, 1021, 10]
)

go( [2, 341, 73, 8265, 234004, 602, 7400000, 200000000],
    [341, 234004, 2, 200000000, 7400000, 8265, 73, 602]
)

go( [2367, -65325, 134, -185007, 3291, 7832, -65326, 789, 980, -3289, 3],
    [7832, -3289, 980, 2367, 134, -185007, 3291, -65326, 3, -65325, 789]
)

go( [4376, -345, -342, 4376, -345, 84945, 4376, -347, -26509, 4376, 84945, 84944, -26509, 896341, 4376],
    [-342, 84944, 84945, 84945, -345, -345, -347, 896341, 4376, 4376, 4376, 4376, 4376, -26509, -26509]
)

go( [10935, 12732, -3058, 1673, 14971, 5701, 18342, 4590, -10248, -11243, -5848, 14836, 7648, -3772, -8700, 19165, -16397, -13192, -18946, 14203],
    [-3058, 14971, 10935, 1673, -11243, 14203, 5701, 4590, 7648, 19165, -13192, -18946, 12732, 18342, -10248, -5848, -16397, 14836, -3772, -8700]
)